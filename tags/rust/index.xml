<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on liloew 在写字</title><link>https://blog.liloew.in/tags/rust/</link><description>Recent content in Rust on liloew 在写字</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 21 Dec 2023 19:15:41 +0800</lastBuildDate><atom:link href="https://blog.liloew.in/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust 之闭包 - Ⅰ</title><link>https://blog.liloew.in/posts/rust-closure-1/</link><pubDate>Thu, 21 Dec 2023 19:15:41 +0800</pubDate><guid>https://blog.liloew.in/posts/rust-closure-1/</guid><description>&lt;p>&lt;code>闭包&lt;/code> 是在以函数作为一等公民等编程语言中实现词法绑定等一种技术, &lt;code>闭包&lt;/code> 和 &lt;code>匿名函数&lt;/code> 在一些语境下经常互为替换, 但严格来说 &lt;code>匿名函数&lt;/code> 也即字面意义上等没有被赋予名称等函数, 而 &lt;code>闭包&lt;/code> 实际上是函数的一个实例, 相对于常规函数, &lt;code>闭包&lt;/code> 可以捕捉环境上下文环境中的自由变量, 从一般定义来说即:&lt;/p>
&lt;pre tabindex="0">&lt;code>f(x) = g(x) + h(y)
&lt;/code>&lt;/pre>&lt;p>这里函数 &lt;code>f(x)&lt;/code> 可以表示为关于 &lt;code>x&lt;/code> 和 &lt;code>y&lt;/code> 的函数, 而函数 &lt;code>f&lt;/code> 中无 &lt;code>y&lt;/code> 的信息(相对的是 &lt;code>f(x, y)&lt;/code>), 即 &lt;code>y&lt;/code> 是自由变量. 除了本文介绍的 &lt;code>Rust&lt;/code> 外其他诸如 &lt;code>Swift&lt;/code>, &lt;code>Go&lt;/code>, &lt;code>Erlang&lt;/code>, &lt;code>JavaScript&lt;/code>, &lt;code>Python&lt;/code> 等都有 &lt;code>闭包&lt;/code>.&lt;/p></description><content>&lt;p>&lt;code>闭包&lt;/code> 是在以函数作为一等公民等编程语言中实现词法绑定等一种技术, &lt;code>闭包&lt;/code> 和 &lt;code>匿名函数&lt;/code> 在一些语境下经常互为替换, 但严格来说 &lt;code>匿名函数&lt;/code> 也即字面意义上等没有被赋予名称等函数, 而 &lt;code>闭包&lt;/code> 实际上是函数的一个实例, 相对于常规函数, &lt;code>闭包&lt;/code> 可以捕捉环境上下文环境中的自由变量, 从一般定义来说即:&lt;/p>
&lt;pre tabindex="0">&lt;code>f(x) = g(x) + h(y)
&lt;/code>&lt;/pre>&lt;p>这里函数 &lt;code>f(x)&lt;/code> 可以表示为关于 &lt;code>x&lt;/code> 和 &lt;code>y&lt;/code> 的函数, 而函数 &lt;code>f&lt;/code> 中无 &lt;code>y&lt;/code> 的信息(相对的是 &lt;code>f(x, y)&lt;/code>), 即 &lt;code>y&lt;/code> 是自由变量. 除了本文介绍的 &lt;code>Rust&lt;/code> 外其他诸如 &lt;code>Swift&lt;/code>, &lt;code>Go&lt;/code>, &lt;code>Erlang&lt;/code>, &lt;code>JavaScript&lt;/code>, &lt;code>Python&lt;/code> 等都有 &lt;code>闭包&lt;/code>.&lt;/p>
&lt;p>我们先来看一下在 &lt;code>Rust&lt;/code> 中如何定义一个常规函数:&lt;/p>
&lt;pre tabindex="0">&lt;code>fn max(left: i64, right: i64) -&amp;gt; i64 {
if left &amp;gt; right {
left
} else {
right
}
}
&lt;/code>&lt;/pre>&lt;p>我们将其转换为 &lt;code>闭包&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>|left: i64, right: i64| -&amp;gt; i64 {
if left &amp;gt; right {
left
} else {
right
}
}
&lt;/code>&lt;/pre>&lt;p>可以看到 &lt;code>闭包&lt;/code> 的语法与 &lt;code>函数&lt;/code> 即为相似, 我们只是简单地把 &lt;code>(&lt;/code> 和 &lt;code>)&lt;/code> 用 &lt;code>|&lt;/code> 替换并且移除了 &lt;code>fn&lt;/code> 关键字和 &lt;code>函数名&lt;/code>. 为了进行调用我们可以将其赋值给一个变量并通过该变量来调用定义的 &lt;code>闭包&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>let max_closure = |left: i64, right: i64| -&amp;gt; i64 {
if left &amp;gt; right {
left
} else {
right
}
}
let max_number = max_closure(10, 11);
&lt;/code>&lt;/pre>&lt;p>相对于函数而言, 以上闭包我们还可以进一步简化:&lt;/p>
&lt;pre tabindex="0">&lt;code>// First
let max_closure = |left, right| {
if left &amp;gt; right {
left
} else {
right
}
};
// -----------------------------------------------
// Second
let max_closure = |left, right| if left &amp;gt; right { left } else { right };
&lt;/code>&lt;/pre>&lt;p>可以看到除了 &lt;code>|&lt;/code> 我们移除了多于的 &lt;code>{}&lt;/code> 和 &lt;code>i64&lt;/code> 类型定义.&lt;/p>
&lt;p>前文提到过 &lt;code>闭包&lt;/code> 相对于 &lt;code>函数&lt;/code> 具有捕捉上下文环境的能力, 也即可以拥有 &lt;code>自由变量&lt;/code>. 仍以上面定义的 &lt;code>max_closure&lt;/code> 闭包为例:&lt;/p>
&lt;pre tabindex="0">&lt;code>let addition = 10;
let max_closure = |left, right| {
if left &amp;gt; right {
left + addition
} else {
right + addition
}
};
&lt;/code>&lt;/pre>&lt;p>这里 &lt;code>addition&lt;/code> 为外部变量, 但在 &lt;code>max_closure&lt;/code> 内部我们仍然可以访问, 如果是函数则不行.&lt;/p>
&lt;p>以上的例子并无特别之处, &lt;code>闭包&lt;/code> 可以实现的功能函数一般也可以实现, 除了捕捉上下文环境外. 但上面闭包所展现的场景并不能有效说明为何要用闭包而不是直接书写如下语句:&lt;/p>
&lt;pre tabindex="0">&lt;code>let addition = 10;
let left = ;
let right = ;
let max_value = if left &amp;gt; right {
left + addition
} else {
right + addition
};
&lt;/code>&lt;/pre>&lt;p>前文说过 &lt;code>闭包&lt;/code> 是以函数为 &lt;code>一等公民&lt;/code> 的编程语言中所具有的鲜明特性, 因此让以上定义的 &lt;code>max_closure&lt;/code> 闭包发挥作用往往是在如下场景中:&lt;/p>
&lt;pre tabindex="0">&lt;code>fn max_by_number(addition: i64) -&amp;gt; impl Fn(i64, i64) -&amp;gt; i64 {
return move |left: i64, right: i64| -&amp;gt; i64 {
if left &amp;gt; right {
left + addition
} else {
right + addition
}
};
}
let max = max_by_number(10);
println!(&amp;#34;MAX: {}&amp;#34;, max(11, 12));
&lt;/code>&lt;/pre>&lt;p>这里较之前语法有过多元素需要介绍, 首先在定义 &lt;code>max_by_number&lt;/code> 函数时其返回等不再是一个普通的类型而是 &lt;code>impl Fn(i64, i64) -&amp;gt; i64&lt;/code>. &lt;code>Fn&lt;/code> 是一个 &lt;code>Trait&lt;/code>, 其表示 &lt;code>调用者可以反复调用并且不修改其参数, 即参数以 &amp;amp; 借用&lt;/code>. 同时 &lt;code>Rust&lt;/code> 还为我们提供了另外两种类似的 &lt;code>Trait&lt;/code>: &lt;code>FnMut&lt;/code> - &lt;code>调用者可多次调用并且会修改其参数, 即参数以 &amp;amp;mut 形式借用&lt;/code>; &lt;code>FnOnce&lt;/code> - &lt;code>调用者仅可调用一次, 参数以 move 形式传入&lt;/code>. 另外需要补充等是 &lt;code>FnOnce&lt;/code> 是 &lt;code>FnMut&lt;/code> 的 &lt;code>父&lt;/code> &lt;code>Trait&lt;/code>, &lt;code>FnMut&lt;/code> 是 &lt;code>Fn&lt;/code> 的 &lt;code>父&lt;/code> &lt;code>Trait&lt;/code>. 也即任何实现了 &lt;code>FnMut&lt;/code> 的对象必然实现了 &lt;code>FnOnce&lt;/code>, 任何实现了 &lt;code>Fn&lt;/code> 的对象必然也实现了 &lt;code>FnMut&lt;/code>. 那么这个 &lt;code>max_by_number&lt;/code> 函数定义真正函数为 &lt;code>返回一个实现了 Fn Trait 的闭包, 该闭包有两个参数都是 i64 类型, 同时该闭包会返回一个 i64 的结果&lt;/code>. &lt;code>max_by_number&lt;/code> 函数体里直接通过 &lt;code>return&lt;/code> 返回 &lt;code>闭包&lt;/code>, 该 &lt;code>闭包&lt;/code> 通过 &lt;code>move&lt;/code> 捕捉外部环境的 &lt;code>addition&lt;/code> 变量. 语句 &lt;code>let max = max_by_number(10);&lt;/code> 返回一个闭包并赋值给 &lt;code>max&lt;/code>, 后续再通过 &lt;code>max(11, 12)&lt;/code> 调用该闭包获得最终结果.&lt;/p>
&lt;p>如果以上还不够明晰的话我们看一个 &lt;code>Rust&lt;/code> 中经常会接触到的实用 &lt;code>闭包&lt;/code> - &lt;code>unwrap_or_else&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code> pub fn unwrap_or_else&amp;lt;F&amp;gt;(self, f: F) -&amp;gt; T
where
F: FnOnce() -&amp;gt; T,
{
match self {
Some(x) =&amp;gt; x,
None =&amp;gt; f(),
}
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>unwrap_or_else&lt;/code> 函数获得自身所有权并接收一个 &lt;code>FnOnce&lt;/code> 等闭包同时该闭包返回泛型 &lt;code>T&lt;/code> - 其结果与 &lt;code>Option&amp;lt;T&amp;gt;&lt;/code> 相吻合.&lt;/p></content></item><item><title>DHCP 协议分析及实现 - Ⅱ</title><link>https://blog.liloew.in/posts/rust-implementation-dhcp-2/</link><pubDate>Fri, 03 Nov 2023 21:03:41 +0800</pubDate><guid>https://blog.liloew.in/posts/rust-implementation-dhcp-2/</guid><description>&lt;p>&lt;a href="https://blog.liloew.in/posts/rust-implementation-dhcp-1/">前一篇文章&lt;/a>介绍了 &lt;code>DHCP&lt;/code> 协议定义以及相关信令之间的流转, 本文主要通过 &lt;code>Rust&lt;/code> 从头实现一个 &lt;code>DHCP&lt;/code> 协议客户端.&lt;/p>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>首先需要安装 &lt;code>Rust&lt;/code>, 目前 &lt;code>Rust&lt;/code> 官方主要提供 &lt;code>Rustup&lt;/code> 这一工具管理 &lt;code>Rust&lt;/code> 各版本. 如果是 &lt;code>Windows&lt;/code> 可直接下载 &lt;code>Rustup-init.exe&lt;/code> 运行即可, 如果是 &lt;code>Linux&lt;/code> 或 &lt;code>macOS&lt;/code> 则可在 &lt;code>Shell&lt;/code> 中运行一下命令快速安装:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code>&lt;/pre>&lt;p>&lt;code>Rustup&lt;/code> 在安装 &lt;code>Rust&lt;/code> 同时也会同时安装 &lt;code>Cargo&lt;/code> 这一构建和包管理工具, 相对于 &lt;code>C/C++&lt;/code> 而言极大地减轻依赖和构建管理的心智负担.&lt;/p>
&lt;p>在安装完 &lt;code>Rust&lt;/code> 和 &lt;code>Cargo&lt;/code> 后由于涉及到网络报文, 因此还建议安装 &lt;code>Wireshark&lt;/code>(&lt;code>Linux&lt;/code> 环境下使用 &lt;code>tcpdump&lt;/code> 亦可)以便后续对报文进行分析.&lt;/p>
&lt;p>&lt;code>IDE&lt;/code> 可以选择 &lt;code>VS Code&lt;/code> 或 &lt;code>JetBrains&lt;/code> 新发布的 &lt;code>RustRover&lt;/code>, 如果选择 &lt;code>VS Code&lt;/code> 的话为了进行调试还需同时安装 &lt;code>CodeLLDB&lt;/code> 插件.&lt;/p></description><content>&lt;p>&lt;a href="https://blog.liloew.in/posts/rust-implementation-dhcp-1/">前一篇文章&lt;/a>介绍了 &lt;code>DHCP&lt;/code> 协议定义以及相关信令之间的流转, 本文主要通过 &lt;code>Rust&lt;/code> 从头实现一个 &lt;code>DHCP&lt;/code> 协议客户端.&lt;/p>
&lt;h2 id="环境准备">环境准备&lt;/h2>
&lt;p>首先需要安装 &lt;code>Rust&lt;/code>, 目前 &lt;code>Rust&lt;/code> 官方主要提供 &lt;code>Rustup&lt;/code> 这一工具管理 &lt;code>Rust&lt;/code> 各版本. 如果是 &lt;code>Windows&lt;/code> 可直接下载 &lt;code>Rustup-init.exe&lt;/code> 运行即可, 如果是 &lt;code>Linux&lt;/code> 或 &lt;code>macOS&lt;/code> 则可在 &lt;code>Shell&lt;/code> 中运行一下命令快速安装:&lt;/p>
&lt;pre tabindex="0">&lt;code>curl --proto &amp;#39;=https&amp;#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh
&lt;/code>&lt;/pre>&lt;p>&lt;code>Rustup&lt;/code> 在安装 &lt;code>Rust&lt;/code> 同时也会同时安装 &lt;code>Cargo&lt;/code> 这一构建和包管理工具, 相对于 &lt;code>C/C++&lt;/code> 而言极大地减轻依赖和构建管理的心智负担.&lt;/p>
&lt;p>在安装完 &lt;code>Rust&lt;/code> 和 &lt;code>Cargo&lt;/code> 后由于涉及到网络报文, 因此还建议安装 &lt;code>Wireshark&lt;/code>(&lt;code>Linux&lt;/code> 环境下使用 &lt;code>tcpdump&lt;/code> 亦可)以便后续对报文进行分析.&lt;/p>
&lt;p>&lt;code>IDE&lt;/code> 可以选择 &lt;code>VS Code&lt;/code> 或 &lt;code>JetBrains&lt;/code> 新发布的 &lt;code>RustRover&lt;/code>, 如果选择 &lt;code>VS Code&lt;/code> 的话为了进行调试还需同时安装 &lt;code>CodeLLDB&lt;/code> 插件.&lt;/p>
&lt;h2 id="开发">开发&lt;/h2>
&lt;p>我们首先通过 &lt;code>cargo new inode-rs&lt;/code> 新建一个项目, 其中 &lt;code>inode-rs&lt;/code> 是项目名称. 为便于项目管理 &lt;code>Cargo&lt;/code> 为我们提供了 &lt;code>workspace&lt;/code> 的概念, 此处我们在 &lt;code>inode-rs&lt;/code> 下新建 &lt;code>packet&lt;/code> 和 &lt;code>cli&lt;/code> 两个子项目. 此时项目结构看起来像这样:&lt;/p>
&lt;pre tabindex="0">&lt;code>.
├── Cargo.toml
├── cli
└── packet
&lt;/code>&lt;/pre>&lt;p>为了后续开发我们还需要至少添加 &lt;code>bytes&lt;/code>, &lt;code>pnet&lt;/code> 和 &lt;code>tokio&lt;/code> 依赖. 其中 &lt;code>bytes&lt;/code> 主要用于二进制报文的读写, &lt;code>pnet&lt;/code> 可用于获取本机网卡信息, &lt;code>tokio&lt;/code> 是一个异步运行时库, 我们使用其提供的 &lt;code>async/await&lt;/code> 运行环境简化异步和多线程操作.&lt;/p>
&lt;p>我们在 &lt;code>packet&lt;/code> 子项目下依次定义子 &lt;code>mod&lt;/code> 为 &lt;code>udp&lt;/code> 并在 &lt;code>udp&lt;/code> 模块下定义 &lt;code>dhcp&lt;/code> 模块, 最终文件结构为 &lt;code>packet/udp/dhcp.rs&lt;/code>. 在 &lt;code>dhcp.rs&lt;/code> 内定义具体的数据结构.&lt;/p>
&lt;p>依据 &lt;code>RFC 2132&lt;/code> 中关于 &lt;code>options&lt;/code> 章节我们首先定义一个 &lt;code>DHCP Message Type&lt;/code> 消息类型的枚举:&lt;/p>
&lt;pre tabindex="0">&lt;code>#[derive(Debug, Clone, Copy)]
pub enum DHCPMessageType {
DHCPDISCOVER = 0x01,
DHCPOFFER = 0x02,
DHCPREQUEST = 0x03,
DHCPDECLINE = 0x04,
DHCPACK = 0x05,
DHCPNAK = 0x06,
DHCPRELEASE = 0x07,
DHCPINFORM = 0x08,
}
&lt;/code>&lt;/pre>&lt;p>同样, 依据 &lt;code>RFC 2131&lt;/code> 中关于报文格式章节我们首先定义 &lt;code>op&lt;/code> 枚举:&lt;/p>
&lt;pre tabindex="0">&lt;code>#[derive(Debug, Clone, Copy, Default)]
pub enum DHCPOP {
#[default]
BOOTREQUEST = 0x01,
BOOTREPLY = 0x02,
}
&lt;/code>&lt;/pre>&lt;p>此处 &lt;code>DHCPOP&lt;/code> 枚举由于在网络传输过程中需要序列化为 &lt;code>u8&lt;/code>, 在客户端接收到报文后再将对应的 &lt;code>u8&lt;/code> 数值反序列化为 &lt;code>DHCPOP&lt;/code> 枚举, 因此我们需要实现 &lt;code>Into&lt;/code> 和 &lt;code>From&lt;/code> 两个 &lt;code>Trait&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>impl Into&amp;lt;DHCPOP&amp;gt; for u8 {
fn into(self) -&amp;gt; DHCPOP {
match self {
0x01 =&amp;gt; DHCPOP::BOOTREQUEST,
0x02 =&amp;gt; DHCPOP::BOOTREPLY,
_ =&amp;gt; DHCPOP::BOOTREQUEST,
}
}
}
impl From&amp;lt;DHCPOP&amp;gt; for u8 {
fn from(value: DHCPOP) -&amp;gt; Self {
value as u8
}
}
&lt;/code>&lt;/pre>&lt;p>在实现 &lt;code>Into&lt;/code> &lt;code>Trait&lt;/code> 时我们使用了 &lt;code>match&lt;/code> &lt;code>模式匹配&lt;/code>. 当前 &lt;code>Rust&lt;/code> 要求针对 &lt;code>match&lt;/code> 模式匹配必须是 &lt;code>穷举&lt;/code> 的 - 即必须保护所有可能情况, 因此在对 &lt;code>u8&lt;/code> 进行匹配时由于我们只关注 &lt;code>0x01&lt;/code> 和 &lt;code>0x02&lt;/code> 两种场景, 针对其他情况统一使用 &lt;code>_&lt;/code> 进行匹配并返回一个默认的 &lt;code>DHCPOP::BOOTREQUEST&lt;/code>.&lt;/p>
&lt;p>&lt;em>其他一些类似的枚举我们不在反复展示.&lt;/em>&lt;/p>
&lt;p>在定义了必要的一些 &lt;code>enum&lt;/code> 后我们再定义一个 &lt;code>DHCPDiscover&lt;/code> 结构体:&lt;/p>
&lt;pre tabindex="0">&lt;code>#[derive(Debug, Clone)]
pub struct DHCPDiscover {
pub op: DHCPOP,
pub htype: DHCPHType,
pub hlen: DHCPHLen,
pub hops: u8,
pub xid: u32,
pub secs: u16,
pub flags: u16,
pub ciaddr: u32,
pub yiaddr: u32,
pub siaddr: u32,
pub giaddr: u32,
pub chaddr: [u8; 16],
pub sname: [u8; 64],
pub file: [u8; 128],
pub options: Vec&amp;lt;u8&amp;gt;,
}
&lt;/code>&lt;/pre>&lt;p>同时为 &lt;code>DHCPDiscover&lt;/code> 实现 &lt;code>Default&lt;/code> &lt;code>Trait&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>impl Default for DHCPDiscover {
fn default() -&amp;gt; Self {
DHCPDiscover {
op: DHCPOP::BOOTREQUEST,
htype: DHCPHType::ETHERNET,
hlen: DHCPHLen::ETHERNET,
hops: 0x00,
xid: 0x00000000,
secs: 0x0000,
flags: 0x0000,
ciaddr: 0x00000000,
yiaddr: 0x00000000,
siaddr: 0x00000000,
giaddr: 0x00000000,
chaddr: [0x00; 16],
sname: [0; 64],
file: [0; 128],
options: vec![99, 130, 83, 99],
}
}
}
&lt;/code>&lt;/pre>&lt;p>在为 &lt;code>DHCPDiscover&lt;/code> 实现 &lt;code>Default&lt;/code> &lt;code>Trait&lt;/code> 时我们为字段 &lt;code>options&lt;/code> 预先存入了 &lt;code>magic cookie&lt;/code> 即 &lt;code>[99, 130, 83, 99]&lt;/code>(&lt;code>10&lt;/code> 进制表示).&lt;/p>
&lt;p>除了实现 &lt;code>Default&lt;/code> &lt;code>Trait&lt;/code> 我们同时还定义一个 &lt;code>fn with_mac(mac: &amp;amp;str)&lt;/code> 的关联函数, 其作用是根据 &lt;code>MAC&lt;/code> 地址初始化 &lt;code>DHCPDiscover&lt;/code> 对象; 同时为了支持动态设置 &lt;code>options&lt;/code> 字段, 我们为 &lt;code>DHCPDiscover&lt;/code> 添加一个 &lt;code>fn insert_options(&amp;amp;mut self, options: Vec&amp;lt;DHCPOPTIONS&amp;gt;)&lt;/code> 方法, 该方法关联到 &lt;code>DHCPDiscover&lt;/code> 的实例并可变(&lt;code>mut&lt;/code>)借用其实例自身以更新相关属性:&lt;/p>
&lt;pre tabindex="0">&lt;code>impl DHCPDiscover {
pub fn with_mac(mac: &amp;amp;str) -&amp;gt; Self {
let mut mac_addr: Vec&amp;lt;u8&amp;gt; = if mac.contains(&amp;#34;-&amp;#34;) {
str::split(mac, &amp;#34;-&amp;#34;)
.map(|u| u8::from_str_radix(u, 16).unwrap())
.collect()
} else {
str::split(mac, &amp;#34;:&amp;#34;)
.map(|u| u8::from_str_radix(u, 16).unwrap())
.collect()
};
mac_addr.resize(16, 0);
let mut discover = DHCPDiscover::default();
discover.chaddr = mac_addr.try_into().unwrap();
discover
}
pub fn insert_options(&amp;amp;mut self, options: Vec&amp;lt;DHCPOPTIONS&amp;gt;) {
for ele in options.iter() {
self.options.push(ele.tp as u8);
self.options.push(ele.len);
self.options.extend(ele.va.clone());
}
self.options.push(0xff);
}
}
&lt;/code>&lt;/pre>&lt;p>以上除了定义 &lt;code>enum&lt;/code> 和 &lt;code>struct&lt;/code> 外, 我们再定义一个 &lt;code>DHCPBytes&lt;/code> &lt;code>trait&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>pub trait DHCPBytes {
fn to_bytes(&amp;amp;self) -&amp;gt; BytesMut;
}
&lt;/code>&lt;/pre>&lt;p>并要求所有实现该 &lt;code>trait&lt;/code> 的元素都必须实现 &lt;code>to_bytes&lt;/code> 方法以便将对应元素转换为二进制 &lt;code>bytes&lt;/code> 从而在 &lt;code>UDP&lt;/code> 报文中进行传输. 其中 &lt;code>BytesMut&lt;/code> 由 &lt;code>bytes&lt;/code> 这个 &lt;code>crate&lt;/code> 提供, 而 &lt;code>bytes&lt;/code> 库主要在于提供高效的针对字节缓冲的操作. &lt;code>Bytes&lt;/code> 作为一个高效的存储与操作连续内存空间的容器, 其设计的主要目标在于网络编码以及其他一些应用场景.&lt;/p>
&lt;pre tabindex="0">&lt;code>impl DHCPBytes for DHCPDiscover {
fn to_bytes(&amp;amp;self) -&amp;gt; BytesMut {
let mut discover_bytes = BytesMut::new();
discover_bytes.put_u8(self.op as u8);
discover_bytes.put_u8(self.htype as u8);
discover_bytes.put_u8(self.hlen as u8);
discover_bytes.put_u8(self.hops);
discover_bytes.put_u32(self.xid);
discover_bytes.put_u16(self.secs);
discover_bytes.put_u16(self.flags);
discover_bytes.put_u32(self.ciaddr);
discover_bytes.put_u32(self.yiaddr);
discover_bytes.put_u32(self.siaddr);
discover_bytes.put_u32(self.giaddr);
for ele in self.chaddr.iter() {
discover_bytes.put_u8(*ele);
}
for ele in self.sname.iter() {
discover_bytes.put_u8(*ele);
}
for ele in self.file.iter() {
discover_bytes.put_u8(*ele);
}
for ele in self.options.iter() {
discover_bytes.put_u8(*ele);
}
discover_bytes
}
}
&lt;/code>&lt;/pre>&lt;p>以上 &lt;code>DHCPDiscover&lt;/code> 实现的 &lt;code>DHCPBytes&lt;/code> 主要是按 &lt;code>RFC 2131&lt;/code> 内定义的报文格式将对应字段转换为 &lt;code>Bytes&lt;/code>. 另外像其中 &lt;code>xid&lt;/code>, &lt;code>secs&lt;/code> 和 &lt;code>ciaddr&lt;/code> 等字段由于在标准中分别采用 &lt;code>4&lt;/code>, &lt;code>2&lt;/code> 和 &lt;code>4&lt;/code> 字节, 分别对应了 &lt;code>32&lt;/code>, &lt;code>16&lt;/code> 和 &lt;code>32&lt;/code> &lt;code>BIT&lt;/code>, 因此为简化此处直接按对应 &lt;code>BIT&lt;/code> 定义了无符整型数据.&lt;/p>
&lt;p>在完成以上相关 &lt;code>enum&lt;/code> 和 &lt;code>struct&lt;/code> 定义的最后我们继续来实现 &lt;code>main()&lt;/code> 方法:&lt;/p>
&lt;pre tabindex="0">&lt;code>#[tokio::main]
async fn main() -&amp;gt; Result&amp;lt;()&amp;gt; {
let socket = UdpSocket::bind(&amp;#34;0.0.0.0:68&amp;#34;).await?;
let broadcast = socket.set_broadcast(true);
if let Ok(r) = broadcast {
println!(&amp;#34;开启广播模式&amp;#34;);
}
let mut buf = [0; 1024];
let mac = &amp;#34;AC-48-78-43-C7-B8&amp;#34;;
let mut v = vec![DHCPHType::ETHERNET as u8];
let a: Vec&amp;lt;u8&amp;gt; = str::split(mac, &amp;#34;-&amp;#34;)
.map(|u| u8::from_str_radix(u, 16).unwrap())
.collect();
v.extend_from_slice(&amp;amp;a);
let parameter_request_list: Vec&amp;lt;u8&amp;gt; = vec![
DHCPOPTION::SubnetMask as u8,
DHCPOPTION::RouterOption as u8,
DHCPOPTION::DomainNameServerOption as u8,
DHCPOPTION::NetworkTimeProtocolServersOption as u8,
];
let mut discovery_message = DHCPDiscover::with_mac(mac);
discovery_message.insert_options(vec![
DHCPOPTIONS {
tp: DHCPOPTION::DHCPMessageType,
len: 1,
va: vec![DHCPMessageType::DHCPDISCOVER as u8],
},
DHCPOPTIONS {
tp: DHCPOPTION::ClientIdentifier,
len: v.len() as u8,
va: v.clone(),
},
DHCPOPTIONS {
tp: DHCPOPTION::ParameterRequestList,
len: parameter_request_list.len() as u8,
va: parameter_request_list.clone(),
},
]);
let tmp_bytes = discovery_message.to_bytes();
let broadcast_result = socket.send_to(&amp;amp;tmp_bytes, &amp;#34;255.255.255.255:67&amp;#34;).await;
match broadcast_result {
Ok(n) =&amp;gt; println!(&amp;#34;发送数据包: {}&amp;#34;, n),
Err(e) =&amp;gt; println!(&amp;#34;错误: {:?}&amp;#34;, e),
}
Ok(())
}
&lt;/code>&lt;/pre>&lt;p>首先通过 &lt;code>UdpSocket::bind&amp;lt;A: ToSocketAddrs&amp;gt;(addr: A)&lt;/code> 函数绑定到本机对应端口, 值得注意的是此处在调用 &lt;code>bind&lt;/code> 函数时后跟了一个 &lt;code>await?&lt;/code> 关键字, 这里的 &lt;code>async/await&lt;/code> 是 &lt;code>Rust&lt;/code> 提供的一个内置使得编写异步代码像同步代码一样的工具, &lt;code>async&lt;/code> 会将相应的代码块转换为一种实现了 &lt;code>Future&lt;/code> &lt;code>Trait&lt;/code> 的状态机, 当调用 &lt;code>await&lt;/code> 时具体的 &lt;code>Runtime&lt;/code> 会挂起当前运行环境直至其返回结果 &lt;code>Future&lt;/code> 准备好. &lt;code>Rust&lt;/code> 并未在标准中提供 &lt;code>async/await&lt;/code> 运行时, 因此我们需要通过 &lt;code>crate&lt;/code> 添加对应依赖, 在此处我们使用 &lt;code>tokio&lt;/code>.&lt;/p>
&lt;p>以上我们同时还通过 &lt;code>socket.set_broadcast(true)&lt;/code> 显示地将 &lt;code>UDPSocket&lt;/code> 实例设置为广播模式, 在前一篇文章(&lt;a href="https://blog.liloew.in/posts/rust-implementation-dhcp-1/">DHCP 协议分析及实现 - Ⅰ&lt;/a>)内我们也曾介绍过由于在 &lt;code>DHCP&lt;/code> 协议通信之初 &lt;code>客户端&lt;/code> 尚无具体 &lt;code>IP&lt;/code> 地址切也不知道对应 &lt;code>服务端&lt;/code> 所在网络中位置, 而这这好利用 &lt;code>UDP&lt;/code> 的广播特性使得客户端向局域网广播 &lt;code>DHCPDISCOVER&lt;/code> 报文. 对应地通过向 &lt;code>255.255.255.255:67&lt;/code> 发送广播报文.&lt;/p>
&lt;p>至此我们完成了初步的 &lt;code>DHCP&lt;/code> 协议中 &lt;code>DHCPDISCOVER&lt;/code> 协议的转换与广播, 后续还有包括 &lt;code>DHCPOFFER&lt;/code>, &lt;code>DHCPREQUEST&lt;/code> 和 &lt;code>DHCPACK&lt;/code> 等消息的转换, 发送与解析我们不再赘述, 感兴趣的可以参考 &lt;a href="https://github.com/liloew/inode-rs">liloew/inode-rs&lt;/a> 完整实现.&lt;/p>
&lt;h2 id="ref">REF&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="https://www.rust-lang.org/">Rust Programming Language&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://tokio.rs/">Tokio - An asynchronous Rust runtime&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/tokio-rs/bytes">tokio-rs/bytes&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/liloew/inode-rs">liloew/inode-rs&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://blog.liloew.in/posts/rust-implementation-dhcp-1/">DHCP 协议分析及实现 - Ⅰ&lt;/a>&lt;/li>
&lt;/ol></content></item><item><title>DHCP 协议分析及实现 - Ⅰ</title><link>https://blog.liloew.in/posts/rust-implementation-dhcp-1/</link><pubDate>Sun, 15 Oct 2023 14:58:16 +0800</pubDate><guid>https://blog.liloew.in/posts/rust-implementation-dhcp-1/</guid><description>&lt;h1 id="背景">背景&lt;/h1>
&lt;p>最近因工作需要接触了 &lt;code>H3C&lt;/code> 的 &lt;code>iNode&lt;/code> 客户端, 参考其官网对 &lt;code>iNode&lt;/code> 的描述:&lt;/p>
&lt;blockquote>
&lt;p>iNode智能客户端是H3C公司自行设计开发的基于Windows的多业务接入客户端软件，提供802.1x、Portal、VPN等多种认证方式，可以与H3C以太网交换机、路由器、VPN网关等网络设备共同组网，实现对局域网、广域网、VPN、无线接入的用户认证，是对用户终端进行身份验证、安全状态评估以及安全策略实施的主体，可以按照企业接入安全策略的要求，实现基于角色/身份的权限和安全控制。&lt;/p>
&lt;/blockquote>
&lt;p>以此为发端, 本来主要讨论 &lt;code>DHCP&lt;/code> 协议的设计与实现, 以期最后通过修改 &lt;code>DHCP&lt;/code> 协议实现 &lt;code>私有&lt;/code> 的 &lt;code>DHCP&lt;/code> 协议, 实现一定条件下限制网络访问的目的.&lt;/p>
&lt;p>同时亦声明本文仅就技术上讨论一种私有协议实现的可能性, 只有如何实现以及是否可行并不在本文讨论范围内.&lt;/p></description><content>&lt;h1 id="背景">背景&lt;/h1>
&lt;p>最近因工作需要接触了 &lt;code>H3C&lt;/code> 的 &lt;code>iNode&lt;/code> 客户端, 参考其官网对 &lt;code>iNode&lt;/code> 的描述:&lt;/p>
&lt;blockquote>
&lt;p>iNode智能客户端是H3C公司自行设计开发的基于Windows的多业务接入客户端软件，提供802.1x、Portal、VPN等多种认证方式，可以与H3C以太网交换机、路由器、VPN网关等网络设备共同组网，实现对局域网、广域网、VPN、无线接入的用户认证，是对用户终端进行身份验证、安全状态评估以及安全策略实施的主体，可以按照企业接入安全策略的要求，实现基于角色/身份的权限和安全控制。&lt;/p>
&lt;/blockquote>
&lt;p>以此为发端, 本来主要讨论 &lt;code>DHCP&lt;/code> 协议的设计与实现, 以期最后通过修改 &lt;code>DHCP&lt;/code> 协议实现 &lt;code>私有&lt;/code> 的 &lt;code>DHCP&lt;/code> 协议, 实现一定条件下限制网络访问的目的.&lt;/p>
&lt;p>同时亦声明本文仅就技术上讨论一种私有协议实现的可能性, 只有如何实现以及是否可行并不在本文讨论范围内.&lt;/p>
&lt;h1 id="分析">分析&lt;/h1>
&lt;p>&lt;code>DHCP&lt;/code> 协议前身是 &lt;code>BOOTP&lt;/code> 协议, 当前关于 &lt;code>DHCP&lt;/code> 最新的信息可在 &lt;code>RFC 2131&lt;/code> 中查阅, 另外 &lt;code>DHCPv6&lt;/code> 则可在 &lt;code>RFC 3315&lt;/code> 中定义. 不过本文当前仅讨论 &lt;code>DHCPv4&lt;/code>. &lt;code>DHCP&lt;/code> 全称 &lt;code>Dynamic Host Configuration Protocol&lt;/code>, 即 &lt;code>动态主机配置协议&lt;/code>, 是一种使网络管理员能够集中管理和自动分配 &lt;code>IP&lt;/code> 地址的通信协议. 在 &lt;code>IP&lt;/code> 网络中每个连接 &lt;code>Internet&lt;/code> 的设备都需要分配唯一的 &lt;code>IP&lt;/code> 地址, &lt;code>DHCP&lt;/code> 协议可使得网络管理员采用中心化的方式分配 &lt;code>IP&lt;/code> 地址, 并对 &lt;code>IP&lt;/code> 地址的使用进行必要的管理, 当某台计算机移动到网络其他位置时, 能自动收到新的 &lt;code>IP&lt;/code> 地址请求.&lt;/p>
&lt;p>同时 &lt;code>DHCP&lt;/code> 使用了 &lt;code>租约&lt;/code> 的概念, 这使得在局域网中可以最大化地使用有限的 &lt;code>IP&lt;/code> 地址资源, 同时 &lt;code>DHCP&lt;/code> 也支持为计算机分配静态地址.&lt;/p>
&lt;ul>
&lt;li>&lt;code>DHCP&lt;/code> 协议是一种基于 &lt;code>UDP&lt;/code> 之上的应用层协议, 主要是因为在依据 &lt;code>DHCP&lt;/code> 获取 &lt;code>IP&lt;/code> 地址前计算机尚无有效的 &lt;code>IP&lt;/code> 地址, 此时 &lt;code>客户端&lt;/code> 可利用 &lt;code>UDP&lt;/code> 的广播特性向局域网内广播 &lt;code>DHCP&lt;/code> 报文, 同时 &lt;code>DHCP 服务器&lt;/code> 亦采用广播的形式向局域网内响应对应请求. &lt;code>DHCPv4&lt;/code> 定义了以下几种消息:&lt;/li>
&lt;li>&lt;code>DHCPDISCOVER&lt;/code> 消息用于 &lt;code>客户端&lt;/code> 广播以确定局域网内 &lt;code>服务器&lt;/code>.&lt;/li>
&lt;li>&lt;code>DHCPOFFER&lt;/code> 消息用于服务端响应客户端的 &lt;code>DHCPDISCOVER&lt;/code> 消息并向客户端提供配置参数.&lt;/li>
&lt;li>&lt;code>DHCPREQUEST&lt;/code> 消息主要用于客户端依据服务端提供的配置参数向服务端请求 &lt;code>IP&lt;/code> 地址.&lt;/li>
&lt;li>&lt;code>DHCPACK&lt;/code> 消息用于服务端向客户端依据配置参数确认分配的 &lt;code>IP 地址&lt;/code>.&lt;/li>
&lt;li>&lt;code>DHCPNAK&lt;/code> 消息用于服务端通知客户端网络地址错误或客户端地址过期等.&lt;/li>
&lt;li>&lt;code>DHCPDECLINE&lt;/code> 消息用于客户端向服务端指示已拥有网络地址.&lt;/li>
&lt;li>&lt;code>DHCPRELEASE&lt;/code> 消息用于客户端告知服务端释放对应的网络地址.&lt;/li>
&lt;li>&lt;code>DHCPINFORM&lt;/code> 消息用于客户端向服务端请求本地配置.&lt;/li>
&lt;/ul>
&lt;p>&lt;code>RFC 2131&lt;/code> 在定义 &lt;code>DHCP&lt;/code> 的几种消息的同时也定义了 &lt;code>DHCP&lt;/code> 报文格式:&lt;/p>
&lt;pre tabindex="0">&lt;code> 0 1 2 3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
| op (1) | htype (1) | hlen (1) | hops (1) |
+---------------+---------------+---------------+---------------+
| xid (4) |
+-------------------------------+-------------------------------+
| secs (2) | flags (2) |
+-------------------------------+-------------------------------+
| ciaddr (4) |
+---------------------------------------------------------------+
| yiaddr (4) |
+---------------------------------------------------------------+
| siaddr (4) |
+---------------------------------------------------------------+
| giaddr (4) |
+---------------------------------------------------------------+
| |
| chaddr (16) |
| |
| |
+---------------------------------------------------------------+
| |
| sname (64) |
+---------------------------------------------------------------+
| |
| file (128) |
+---------------------------------------------------------------+
| |
| options (variable) |
+---------------------------------------------------------------+
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>
&lt;p>&lt;code>op&lt;/code> 字段定义了消息的方向 &lt;code>1&lt;/code> 为 &lt;code>客户端&lt;/code> 向 &lt;code>服务端&lt;/code> 发生请求, &lt;code>2&lt;/code> 则为 &lt;code>服务端&lt;/code> 发回的响应.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>htype&lt;/code> 字段定义了 &lt;code>硬件地址类型&lt;/code>, &lt;code>1&lt;/code> 为 &lt;code>10mb&lt;/code> 以太网, 具体定义可参见 &lt;code>RFC 1700&lt;/code>, 在 &lt;code>DHCP&lt;/code> 中一般使用 &lt;code>1&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hlen&lt;/code> 字段表示 &lt;code>硬件地址长度&lt;/code>, 依据 &lt;code>htype&lt;/code> 定义当 &lt;code>htype&lt;/code> 为 &lt;code>1&lt;/code>, 即 &lt;code>以太网&lt;/code> 时, 该字段为 &lt;code>6&lt;/code>, 也即 &lt;code>MAC&lt;/code> 地址长度.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>hops&lt;/code> 字段表示 &lt;code>DHCP&lt;/code> 协议经过的节点数, 客户端在初始发送 &lt;code>DHCP&lt;/code> 请求时将其设置为 &lt;code>0&lt;/code>, &lt;code>DHCP&lt;/code> 协议的 &lt;code>中继&lt;/code> 节点可选地增加该字段的值.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>xid&lt;/code> 字段表示 &lt;code>事务 ID&lt;/code>, 客户端选择一个随机数, 并在其后客户端发送或是服务端发回响应过程中使用该值.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>secs&lt;/code> 字段为客户端获取 &lt;code>IP&lt;/code> 到进行地址 &lt;code>续约&lt;/code> 时所经历的秒数.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>flags&lt;/code> 字段当前在 &lt;code>DHCP&lt;/code> 协议中仅采用了高 1 位, 后续的 15 位当前都是保留的, 使用的 1 位主要用于提示 &lt;code>DHCP&lt;/code> &lt;code>服务端&lt;/code> 或 &lt;code>中继&lt;/code> 节点是否将广播信息发送到客户端所在的子网.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>ciaddr&lt;/code> 字段为 &lt;code>客户端&lt;/code> &lt;code>IP 地址&lt;/code>, 仅当客户端在 &lt;code>BOUND&lt;/code>, &lt;code>RENEW&lt;/code> 或者 &lt;code>REBINDING&lt;/code> 状态时才填充该字段.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>yiaddr&lt;/code> 字段表示 &lt;code>your&lt;/code> &lt;code>客户端&lt;/code> &lt;code>IP 地址&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>siaddr&lt;/code> 字段为下一 &lt;code>服务端&lt;/code> 节点 &lt;code>IP&lt;/code>, 仅当在 &lt;code>DHCPOFFER&lt;/code> 和 &lt;code>DHCPACK&lt;/code> 请求中填充该字段.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>giaddr&lt;/code> 字段为 &lt;code>中继节点&lt;/code> &lt;code>IP 地址&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>chaddr&lt;/code> 字段为 &lt;code>客户端&lt;/code> &lt;code>硬件地址&lt;/code>, 一般为 &lt;code>MAC 地址&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>sname&lt;/code> 字段为可选的 &lt;code>服务器主机名&lt;/code>, 并且以 &lt;code>null&lt;/code> 字符串结束, 也即 &lt;code>0x00&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>file&lt;/code> 字段为 &lt;code>启动文件名&lt;/code>, 在 &lt;code>DHCPDISCOVER&lt;/code> 消息中以常规文件名或 &lt;code>null&lt;/code> 表示, 在 &lt;code>DHCPOFFER&lt;/code> 消息中以全限定路径名表示.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>options&lt;/code> 字段是变长的可选项. 其中首 4 位为固定的 &lt;code>magic cookie&lt;/code> - [0x63, 0x82, 0x53, 0x63].&lt;/p>
&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> Server Client Server
(not selected) (selected)
v v v
| | |
| Begins initialization |
| | |
| _____________/|\____________ |
|/DHCPDISCOVER | DHCPDISCOVER \|
| | |
Determines | Determines
configuration | configuration
| | |
|\ | ____________/ |
| \________ | /DHCPOFFER |
| DHCPOFFER\ |/ |
| \ | |
| Collects replies |
| \| |
| Selects configuration |
| | |
| _____________/|\____________ |
|/ DHCPREQUEST | DHCPREQUEST\ |
| | |
| | Commits configuration
| | |
| | _____________/|
| |/ DHCPACK |
| | |
| Initialization complete |
| | |
. . .
. . .
| | |
| Graceful shutdown |
| | |
| |\ ____________ |
| | DHCPRELEASE \|
| | |
| | Discards lease
| | |
v v v
&lt;/code>&lt;/pre>&lt;p>上图展示了局域网内 &lt;code>DHCP&lt;/code> 信令通信的流程.&lt;/p>
&lt;ul>
&lt;li>客户端在本地局域网内广播 &lt;code>DHCPDISCOVER&lt;/code> 消息, 如果 &lt;code>DHCP&lt;/code> 服务端与客户端不处于同一物理网段则可通过可选的 &lt;code>中继&lt;/code> 节点进行中继转发.&lt;/li>
&lt;li>局域网内所有服务端都可能通过 &lt;code>DHCPOFFER&lt;/code> 消息对 &lt;code>DHCPDISCOVER&lt;/code> 消息进行响应, 同时在 &lt;code>DHCPOFFER&lt;/code> 消息内通过 &lt;code>yiaddr&lt;/code> 字段指示可用的网络地址, 同时也在 &lt;code>options&lt;/code> 字段内包含额外的参数.&lt;/li>
&lt;li>客户端可能会从一或多个服务端收到收到一或多个 &lt;code>DHCPOFFER&lt;/code> 消息. 客户端根据在 &lt;code>DHCPOFFER&lt;/code> 消息内包含的参数通过广播 &lt;code>DHCPREQUEST&lt;/code> 消息选择一个服务端进行响应, 并通过 &lt;code>服务端标识&lt;/code>(&lt;code>server identifier&lt;/code>) 指示具体选择的服务器. 同时在 &lt;code>yiaddr&lt;/code> 字段内保存欲请求的 &lt;code>IP&lt;/code>.&lt;/li>
&lt;li>对于未被选中的服务端收到 &lt;code>DHCPREQUEST&lt;/code> 广播时(根据 &lt;code>server identifier&lt;/code> 字段)明确客户端拒绝了其预分配的 &lt;code>IP&lt;/code> 地址. 针对被选中的服务端则内部提交并将对应网络地址与客户端相绑定, 同时通过 &lt;code>DHCPACK&lt;/code> 消息通知客户端. 在 &lt;code>DHCPACK&lt;/code> 消息内的 &lt;code>yiaddr&lt;/code> 字段同时包含选择的网络地址. 如果被选中的服务端无法响应 &lt;code>DHCPREQUEST&lt;/code> 消息(如待分配的网络地址已被使用)则应当通过 &lt;code>DHCPNAK&lt;/code> 向客户端响应.&lt;/li>
&lt;li>客户端收到 &lt;code>DHCPACK&lt;/code> 时需根据 &lt;code>options&lt;/code> 字段内配置的参数进行最后的检查(如通过 &lt;code>ARP&lt;/code> 检查分配的网络地址是否可用), 如果客户端发现该网络地址已被使用则应当通过 &lt;code>DHCPDECLINE&lt;/code> 向服务端进行响应并重启以上配置流程. 为防止过多的网络流量客户端应当至少等待 &lt;code>10s&lt;/code> 再次进行配置. 如果客户端收到 &lt;code>DHCPNAK&lt;/code> 则立即重启配置流程.&lt;/li>
&lt;li>客户端可通过在 &lt;code>DHCPRELEASE&lt;/code> 消息的 &lt;code>client identifier&lt;/code> 或 &lt;code>chaddr&lt;/code> 字段内包含标识以告知服务端其已放弃对网络地址的租用.&lt;/li>
&lt;/ul>
&lt;p>客户端可能收到来自服务端的 &lt;code>DHCPOFFER&lt;/code>, &lt;code>DHCPACK&lt;/code> 和 &lt;code>DHCPNAK&lt;/code> 三种消息; 服务端可收到来自客户端的 &lt;code>DHCPDISCOVER&lt;/code>, &lt;code>DHCPREQUEST&lt;/code>, &lt;code>DHCPDECLINE&lt;/code>, &lt;code>DHCPRELEASE&lt;/code> 和 &lt;code>DHCPINFORM&lt;/code> 五种消息. 下图则详细描述了 &lt;code>DHCP&lt;/code> 客户端的状态间流转:&lt;/p>
&lt;pre tabindex="0">&lt;code> -------- -------
| | +--------------------------&amp;gt;| |&amp;lt;-------------------+
| INIT- | | +--------------------&amp;gt;| INIT | |
| REBOOT |DHCPNAK/ +----------&amp;gt;| |&amp;lt;---+ |
| |Restart| | ------- | |
-------- | DHCPNAK/ | | |
| Discard offer | -/Send DHCPDISCOVER |
-/Send DHCPREQUEST | | |
| | | DHCPACK v | |
----------- | (not accept.)/ ----------- | |
| | | Send DHCPDECLINE | | |
| REBOOTING | | | | SELECTING |&amp;lt;----+ |
| | | / | | |DHCPOFFER/ |
----------- | / ----------- | |Collect |
| | / | | | replies |
DHCPACK/ | / +----------------+ +-------+ |
Record lease, set| | v Select offer/ |
timers T1, T2 ------------ send DHCPREQUEST | |
| +-----&amp;gt;| | DHCPNAK, Lease expired/ |
| | | REQUESTING | Halt network |
DHCPOFFER/ | | | |
Discard ------------ | |
| | | | ----------- |
| +--------+ DHCPACK/ | | |
| Record lease, set -----| REBINDING | |
| timers T1, T2 / | | |
| | DHCPACK/ ----------- |
| v Record lease, set ^ |
+----------------&amp;gt; ------- /timers T1,T2 | |
+-----&amp;gt;| |&amp;lt;---+ | |
| | BOUND |&amp;lt;---+ | |
DHCPOFFER, DHCPACK, | | | T2 expires/ DHCPNAK/
DHCPNAK/Discard ------- | Broadcast Halt network
| | | | DHCPREQUEST |
+-------+ | DHCPACK/ | |
T1 expires/ Record lease, set | |
Send DHCPREQUEST timers T1, T2 | |
to leasing server | | |
| ---------- | |
| | |------------+ |
+-&amp;gt;| RENEWING | |
| |----------------------------+
----------
&lt;/code>&lt;/pre>&lt;h2 id="options">OPTIONS&lt;/h2>
&lt;p>&lt;code>options&lt;/code> 定义为 2 字节的 &lt;code>Code&lt;/code> 和 1 字节的 &lt;code>Len&lt;/code>, 而后则依据 &lt;code>Len&lt;/code> 包含指定长度字节的数据体. 由于当前 &lt;code>options&lt;/code> 众多当前仅列举一些比较重要的 &lt;code>options&lt;/code>.&lt;/p>
&lt;ol start="0">
&lt;li>
&lt;p>&lt;code>magic cookie&lt;/code>, 正如前文所述, 在 &lt;code>DHCP&lt;/code> 报文内包含 4 字节的 &lt;code>magic cookie&lt;/code>, 其值为 [0x63, 0x82, 0x53, 0x63].&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>DHCP Message Type&lt;/code> 该选项编码为 &lt;code>53&lt;/code>, 其后在 &lt;code>Len&lt;/code> 内定义了 1 字节的数据体, 即 &lt;code>Type&lt;/code>, 而 &lt;code>Type&lt;/code> 在为 &lt;code>0x01 ~ 0x08&lt;/code> 若干种不同的 &lt;code>DHCP&lt;/code> 消息类型.&lt;/p>
&lt;pre tabindex="0">&lt;code> Value Message Type
----- ------------
1 DHCPDISCOVER
2 DHCPOFFER
3 DHCPREQUEST
4 DHCPDECLINE
5 DHCPACK
6 DHCPNAK
7 DHCPRELEASE
8 DHCPINFORM
Code Len Type
+-----+-----+-----+
| 53 | 1 | 1-9 |
+-----+-----+-----+
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Client-identifier&lt;/code> 该选项编码为 &lt;code>61&lt;/code>, 其后在 &lt;code>Len&lt;/code> 内定义了 &lt;code>n&lt;/code> 字节长度的数据体, 其中包含 &lt;code>Type&lt;/code> 1 字节和 &lt;code>Client-Identifier&lt;/code> &lt;code>n-1&lt;/code> 字节. 其中 &lt;code>Client-Identifier&lt;/code> 主要用于服务端在其数据库内鉴别查找客户端, 在 &lt;code>DHCP&lt;/code> 语义环境下 &lt;code>Type&lt;/code> 通常为 &lt;code>0x01&lt;/code> 即 &lt;code>硬件地址&lt;/code>（&lt;code>MAC&lt;/code>), 同时 &lt;code>Client-Identifier&lt;/code> 至少为 2 字节, 如果为 &lt;code>MAC&lt;/code> 地址的话则为 6 字节.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code Len Type Client-Identifier
+-----+-----+-----+-----+-----+---
| 61 | n | t1 | i1 | i2 | ...
+-----+-----+-----+-----+-----+---
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Requested IP Address&lt;/code> 该选项用于客户端在 &lt;code>DHCPDISCOVER&lt;/code> 消息中向服务端请求指定的 &lt;code>IP&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code Len Address
+-----+-----+-----+-----+-----+-----+
| 50 | 4 | a1 | a2 | a3 | a4 |
+-----+-----+-----+-----+-----+-----+
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Parameter Request List&lt;/code> 该选项用于 &lt;code>DHCP&lt;/code> 客户端向服务端请求特定的配置.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code Len Option Codes
+-----+-----+-----+-----+---
| 55 | n | c1 | c2 | ...
+-----+-----+-----+-----+---
&lt;/code>&lt;/pre>&lt;p>当前可选的配置有:&lt;/p>
&lt;pre tabindex="0">&lt;code>Subnet Mask - 0x01
Router Option - 0x03
Domain Name Server Option - 0x06
Network Time Protocol Servers Option - 0x42
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>End Option&lt;/code> 该选项为结束标识, 用于标识消息体的结束, 对应客户端发送的消息可立即结束于此处, 对应服务端发回的消息 &lt;code>RFC&lt;/code> 要求 &lt;code>options&lt;/code> 字段需填充至少 &lt;code>312&lt;/code> 且至多 &lt;code>576&lt;/code> 字节.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code
+-----+
| 255 |
+-----+
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Pad Option&lt;/code> 该选项主要用于字段填充.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code
+-----+
| 0 |
+-----+
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Subnet Mask&lt;/code> 该选项用于指示客户端子网掩码, 其 &lt;code>Len&lt;/code> 为固定 4 字节(&lt;code>DHCPv4&lt;/code>), 后续 4 字节为对应的子网掩码值. 同时如果服务端同时提供了 &lt;code>router option&lt;/code> 则 &lt;code>Subnet Mask&lt;/code> 应该位于前部.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code Len Subnet Mask
+-----+-----+-----+-----+-----+-----+
| 1 | 4 | m1 | m2 | m3 | m4 |
+-----+-----+-----+-----+-----+-----+
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Router Option&lt;/code> 该选项主要用于列举当前网络可路由的 &lt;code>IP&lt;/code> 地址, 同时其 &lt;code>Len&lt;/code> 最少为 4 且永远为 4 的倍数.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code Len Address 1 Address 2
+-----+-----+-----+-----+-----+-----+-----+-----+--
| 3 | n | a1 | a2 | a3 | a4 | a1 | a2 | ...
+-----+-----+-----+-----+-----+-----+-----+-----+--
&lt;/code>&lt;/pre>&lt;/li>
&lt;li>
&lt;p>&lt;code>Renewal (T1) Time Value&lt;/code> 该选项主要用于指示从客户端获取 &lt;code>IP&lt;/code> 地址到续期该 &lt;code>IP&lt;/code> 所需间隔时间. &lt;code>T1 Interval&lt;/code> 为 4 字节 32 位整数, 单位为 &lt;code>秒&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code> Code Len T1 Interval
+-----+-----+-----+-----+-----+-----+
| 58 | 4 | t1 | t2 | t3 | t4 |
+-----+-----+-----+-----+-----+-----+
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ol>
&lt;h1 id="ref">REF&lt;/h1>
&lt;ol>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc2131">RFC 2131 - Dynamic Host Configuration Protocol&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://datatracker.ietf.org/doc/html/rfc2132">RFC 2132 - DHCP Options and BOOTP Vendor Extensions&lt;/a>&lt;/li>
&lt;/ol></content></item></channel></rss>