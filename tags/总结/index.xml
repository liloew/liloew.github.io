<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>总结 on liloew 在写字</title><link>https://blog.liloew.in/tags/%E6%80%BB%E7%BB%93/</link><description>Recent content in 总结 on liloew 在写字</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sat, 18 Jan 2025 23:36:31 +0800</lastBuildDate><atom:link href="https://blog.liloew.in/tags/%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml"/><item><title>2024年终总结</title><link>https://blog.liloew.in/posts/2024-in-review/</link><pubDate>Sat, 18 Jan 2025 23:36:31 +0800</pubDate><guid>https://blog.liloew.in/posts/2024-in-review/</guid><description>今天是 除夕, 决定花时间写一下 2024 年总结, 既是对过去一年工作的回顾，也是对自我的不断完善. 2023 年因各种因素没有做年终总结, 后续还是要严格敦促自己.
工作 今年工作重心上有一些调整, 除了继续延续 23 年研发项目外更多地处理一些研发外围的工作, 既有 研发流程 又有 总结汇报 类的工作. 从研发角度考虑，流程应当尽可能服务于研发工作, 使研发更顺畅工作更顺利否则就会形成 枷锁 和 镣铐, 不仅徒有形式同时还加重一线人员负担. 另外就是对于 口号 和 方法论 颇有感触, 在具体实施过程中存在 定位问题 和 解决问题 四象限, 如果能做到 定位问题 的同时 解决问题 这个维度是最优的, 但往往迫于人员能力和时间要求一线同学只能靠蛮力 硬推, 这样长期下来 技术债 越堆越高最终成为万年屎山. 而 方法论 则是大前提抑或是 最为重要 和 最为不重要 的一环, 对于路径明确的问题方法论已内化在各个环节之中了, 对于没有很好的解决思路或是完全陌生的领域方法论就会显得尤为重要.
回头来说从一线抽出部分精力后终于有时间做一些基础架构和全局整体相关的事情, 下半年原计划做两场以上技术分享，但因年底汇报和一些紧急需求最终搁浅; 另一个就是项目上需针对性地进行性能优化, 初期给了一些优化方案但实施起来研发同学优化的并不是很到位问题也较多, 最终提供 二方包 的形式给了一套较为可靠的解决方案, 尽可能解放一线人员的心智负担, 同时提升代码质量.
学习 今年在 模式识别 遇到了一些问题, 主要是平时工作太忙没有听课期末也没有时间复习, 毫无疑问地挂科了. 不过万幸补考顺利通过也算收获了迄今为止唯一一次挂科, 不知是算完整还是不完整.</description><content>&lt;p>今天是 &lt;code>除夕&lt;/code>, 决定花时间写一下 &lt;code>2024&lt;/code> 年总结, 既是对过去一年工作的回顾，也是对自我的不断完善. &lt;code>2023&lt;/code> 年因各种因素没有做年终总结, 后续还是要严格敦促自己.&lt;/p>
&lt;h2 id="工作">工作&lt;/h2>
&lt;p>今年工作重心上有一些调整, 除了继续延续 &lt;code>23&lt;/code> 年研发项目外更多地处理一些研发外围的工作, 既有 &lt;code>研发流程&lt;/code> 又有 &lt;code>总结汇报&lt;/code> 类的工作. 从研发角度考虑，流程应当尽可能服务于研发工作, 使研发更顺畅工作更顺利否则就会形成 &lt;code>枷锁&lt;/code> 和 &lt;code>镣铐&lt;/code>, 不仅徒有形式同时还加重一线人员负担. 另外就是对于 &lt;code>口号&lt;/code> 和 &lt;code>方法论&lt;/code> 颇有感触, 在具体实施过程中存在 &lt;code>定位问题&lt;/code> 和 &lt;code>解决问题&lt;/code> 四象限, 如果能做到 &lt;code>定位问题&lt;/code> 的同时 &lt;code>解决问题&lt;/code> 这个维度是最优的, 但往往迫于人员能力和时间要求一线同学只能靠蛮力 &lt;code>硬推&lt;/code>, 这样长期下来 &lt;code>技术债&lt;/code> 越堆越高最终成为万年屎山. 而 &lt;code>方法论&lt;/code> 则是大前提抑或是 &lt;code>最为重要&lt;/code> 和 &lt;code>最为不重要&lt;/code> 的一环, 对于路径明确的问题方法论已内化在各个环节之中了, 对于没有很好的解决思路或是完全陌生的领域方法论就会显得尤为重要.&lt;/p>
&lt;p>回头来说从一线抽出部分精力后终于有时间做一些基础架构和全局整体相关的事情, 下半年原计划做两场以上技术分享，但因年底汇报和一些紧急需求最终搁浅; 另一个就是项目上需针对性地进行性能优化, 初期给了一些优化方案但实施起来研发同学优化的并不是很到位问题也较多, 最终提供 &lt;code>二方包&lt;/code> 的形式给了一套较为可靠的解决方案, 尽可能解放一线人员的心智负担, 同时提升代码质量.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;h2 id="学习">学习&lt;/h2>
&lt;p>今年在 &lt;code>模式识别&lt;/code> 遇到了一些问题, 主要是平时工作太忙没有听课期末也没有时间复习, 毫无疑问地挂科了. 不过万幸补考顺利通过也算收获了迄今为止唯一一次挂科, 不知是算完整还是不完整.&lt;/p>
&lt;h2 id="读书">读书&lt;/h2>
&lt;p>首先值得介绍的是今年阅读了三本关于 &lt;code>DuckDB&lt;/code> 相关的书籍 &lt;a href="https://www.manning.com/books/duckdb-in-action">DuckDB in Action&lt;/a>, &lt;a href="https://www.oreilly.com/library/view/duckdb-up-and/9781098159689/">DuckDB: Up and Running&lt;/a> 和 &lt;a href="https://www.packtpub.com/en-us/product/getting-started-with-duckdb-9781803241005">Getting Started with DuckDB&lt;/a>. &lt;code>DuckDB&lt;/code> 是一个主要面向嵌入式系统的 &lt;code>OLAP&lt;/code> 开源列式数据库, 简而言之就是补齐 &lt;code>SQLite&lt;/code> 在数据分析方面的生态位.&lt;/p>
&lt;p>除了 &lt;code>DuckDB&lt;/code> 外另一个重点阅读的方向是 &lt;code>Rust&lt;/code>, &lt;a href="https://book.douban.com/subject/36547630/">Rust程序设计 (第2版) &lt;/a>, &lt;a href="https://www.oreilly.com/library/view/async-rust/9781098149086/">Async Rust&lt;/a>, &lt;a href="https://marabos.nl/atomics/">Rust Atomics and Locks&lt;/a>, &lt;a href="https://www.oreilly.com/library/view/effective-rust/9781098151393/">Effective Rust&lt;/a>, &lt;a href="https://www.manning.com/books/idiomatic-rust">Idiomatic Rust&lt;/a>, &lt;a href="https://www.zero2prod.com/index.html">Zero To Production In Rust&lt;/a>, 关于 &lt;code>Rust&lt;/code> 已无需多言, 但其抛弃了传统以继承为核心的对象模型同时在设计模式方面也有更多不同, 因此也希望能寻求一些关于生产环境的最佳实践.&lt;/p>
&lt;p>除了以上集中式的专题, 其他更多则比较分散了, 关于 &lt;code>k8s&lt;/code> 在日志和可观测方面&lt;a href="https://www.manning.com/books/logs-and-telemetry">Logs and Telemetry&lt;/a>有部分介绍但深度不足, 个人始终觉着 &lt;a href="https://cilium.io/">Cilium&lt;/a> 是当前可以继续探索的方向, 另一方面是 &lt;code>Java&lt;/code> 在微服务这块结合 &lt;code>k8s&lt;/code> 近些年出现了诸如 &lt;code>Quarkus&lt;/code>, &lt;code>Helidon&lt;/code> 和 &lt;code>Micronaut&lt;/code> 等微服务框架, 从个人角度则持续看好 &lt;code>Quarkus&lt;/code> 发展. 结合之前 的一些实践正好这本书 &lt;a href="https://www.manning.com/books/quarkus-in-action">Quarkus in Action&lt;/a> 可以算是一个很好的入门书籍; 工作中个人也一直自我追问什么样的人可以承担研发负责人以及如何做好技术负责人的角色, &lt;a href="https://www.manning.com/books/lead-developer-career-guide">Lead Developer Career Guide&lt;/a> 这本书读下来算是回到了很多疑问, 推荐所有以技术负责人或架构师为职业方向的研发人员都可以读一读.&lt;/p>
&lt;p>其他还有一些书后续会列入已读书单中.&lt;/p>
&lt;h2 id="其他">其他&lt;/h2>
&lt;p>最后值得记上一笔的是在今年拿到了 &lt;code>D 照&lt;/code>, 算是 &lt;code>24&lt;/code> 年最为开心的事了.&lt;/p>
&lt;h2 id="计划">计划&lt;/h2>
&lt;p>首先是工作上面, 继续推动内部技术分享形成良好的技术氛围, 提升产品线内部研发人员能力出来靠外部招聘外还是要加强内部培养; 再者是对内考核与研发人员的横向流动, 激励研发人员主动思考并发挥个人主观能动性总是好过被动喊口号提要求要更有效一些; 另一个是通过 &lt;code>二方包&lt;/code> 的形式提供通用类库框架, 简化一线研发同学心智负担, 降低 &lt;code>BUG&lt;/code> 数量提高稳定性.&lt;/p>
&lt;p>再者是关于个人提升方面, 论文是一个眼看就要落地的大山, 上半年一定要完成了; 另一方面是阅读, &lt;code>24&lt;/code> 年阅读量偏少, 希望 &lt;code>25&lt;/code> 年能抽时间阅读更多的书籍, 保持技术视野和敏感度.&lt;/p>
&lt;p>&lt;code>25&lt;/code> 年继续加油.&lt;/p></content></item></channel></rss>